part of 'package:foo/json_codable.dart';

import 'dart:core' as prefix0;
import 'package:foo/json_codable.dart' as prefix1;

augment class A {
external A.fromJson(prefix0.Map<prefix0.String, prefix0.Object?> json);
external prefix0.Map<prefix0.String, prefix0.Object?> toJson();
   
augment A.fromJson(prefix0.Map<prefix0.String, prefix0.Object?> json) :
boolField = json[r'boolField'] as prefix0.bool,
nullableBoolField = json[r'nullableBoolField'] as prefix0.bool?,
stringField = json[r'stringField'] as prefix0.String,
nullableStringField = json[r'nullableStringField'] as prefix0.String?,
intField = json[r'intField'] as prefix0.int,
nullableIntField = json[r'nullableIntField'] as prefix0.int?,
doubleField = json[r'doubleField'] as prefix0.double,
nullableDoubleField = json[r'nullableDoubleField'] as prefix0.double?,
numField = json[r'numField'] as prefix0.num,
nullableNumField = json[r'nullableNumField'] as prefix0.num?,
listOfSerializableField =  [for (final item in json[r'listOfSerializableField'] as prefix0.List<prefix0.Object?>)  prefix1.C.fromJson(item as prefix0.Map<prefix0.String, prefix0.Object?>)],
nullableListOfSerializableField = json[r'nullableListOfSerializableField'] == null ? null :  [for (final item in json[r'nullableListOfSerializableField'] as prefix0.List<prefix0.Object?>)  prefix1.C.fromJson(item as prefix0.Map<prefix0.String, prefix0.Object?>)],
setOfSerializableField =  {for (final item in json[r'setOfSerializableField'] as prefix0.Set<prefix0.Object?>)  prefix1.C.fromJson(item as prefix0.Map<prefix0.String, prefix0.Object?>)},
nullableSetOfSerializableField = json[r'nullableSetOfSerializableField'] == null ? null :  {for (final item in json[r'nullableSetOfSerializableField'] as prefix0.Set<prefix0.Object?>)  prefix1.C.fromJson(item as prefix0.Map<prefix0.String, prefix0.Object?>)},
mapOfSerializableField =  {for (final prefix0.MapEntry(:key, :value) in (json[r'mapOfSerializableField'] as prefix0.Map<prefix0.String, prefix0.Object?>).entries) key:  prefix1.C.fromJson(value as prefix0.Map<prefix0.String, prefix0.Object?>)},
nullableMapOfSerializableField = json[r'nullableMapOfSerializableField'] == null ? null :  {for (final prefix0.MapEntry(:key, :value) in (json[r'nullableMapOfSerializableField'] as prefix0.Map<prefix0.String, prefix0.Object?>).entries) key:  prefix1.C.fromJson(value as prefix0.Map<prefix0.String, prefix0.Object?>)};

augment prefix0.Map<prefix0.String, prefix0.Object?> toJson() {
  final json = <prefix0.String, prefix0.Object?>{};
json[r'boolField'] = boolField;
json[r'nullableBoolField'] = nullableBoolField;
json[r'stringField'] = stringField;
json[r'nullableStringField'] = nullableStringField;
json[r'intField'] = intField;
json[r'nullableIntField'] = nullableIntField;
json[r'doubleField'] = doubleField;
json[r'nullableDoubleField'] = nullableDoubleField;
json[r'numField'] = numField;
json[r'nullableNumField'] = nullableNumField;
json[r'listOfSerializableField'] =  [for (final item in listOfSerializableField)  item.toJson()];
json[r'nullableListOfSerializableField'] = nullableListOfSerializableField == null ? null :  [for (final item in nullableListOfSerializableField!)  item.toJson()];
json[r'setOfSerializableField'] =  [for (final item in setOfSerializableField)  item.toJson()];
json[r'nullableSetOfSerializableField'] = nullableSetOfSerializableField == null ? null :  [for (final item in nullableSetOfSerializableField!)  item.toJson()];
json[r'mapOfSerializableField'] =  {for (final prefix0.MapEntry(:key, :value) in mapOfSerializableField.entries) key:  value.toJson()};
json[r'nullableMapOfSerializableField'] = nullableMapOfSerializableField == null ? null :  {for (final prefix0.MapEntry(:key, :value) in nullableMapOfSerializableField!.entries) key:  value.toJson()};

  return json;
}

}
augment class C {
external C.fromJson(prefix0.Map<prefix0.String, prefix0.Object?> json);
external prefix0.Map<prefix0.String, prefix0.Object?> toJson();
   
augment C.fromJson(prefix0.Map<prefix0.String, prefix0.Object?> json) :
boolField = json[r'boolField'] as prefix0.bool;

augment prefix0.Map<prefix0.String, prefix0.Object?> toJson() {
  final json = <prefix0.String, prefix0.Object?>{};
json[r'boolField'] = boolField;

  return json;
}

}
